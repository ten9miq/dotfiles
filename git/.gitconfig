[include]
  path = .gitconfig.local
# 環境に合わせて下記を埋めて上記ファイルに記載
# [user]
#   name =
#   email =

# [credential]
#   helper = wincred
#    win  or  linux
#   helper = store # PWが平文で$HOME配下に保存されるので注意 cacheの方を推奨
# 認証情報が一定の間だけlinuxのメモリーに記憶されます timeoutに設定された秒数の間だけ記憶する
#   helper = cache --timeout=36000  # 36000=10時間 デフォは15分

[core]
  editor = vim
  # ファイル名の大文字・小文字の変更を検知するようにする
  ignorecase = false
  # git statusで変更ファイル一覧を表示するときに、日本語のファイル名が文字化けしないでちゃんと表示される。
  quotepath = false
  autocrlf = input

[pager]
  branch = false
  stash = false

[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto

[push]
  # https://qiita.com/awakia/items/6aaea1ffecba725be601
  default = current # 現在のブランチをリモートに同名でpushする。例えupstreamを設定していなくてもpushされる

[branch]
  # 派生元ブランチにリモートブランチが指定されていても追跡ブランチに設定されなくなる
  autosetupmerge = false

[alias]
  a = add
  aa = add -A
  b = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  bv = branch -vv # ブランチ名 コミット番号 [追跡ブランチ名] コミットメッセージの表示
  c = commit
  cm = commit -m
  r = reset
  rh = reset --hard
  cn = clean
  cna = clean -fdx # -d:追跡していないディレクトリを含めて再帰的に削除 -x:追跡していないファイルを全削除
  m = merge

  co = checkout
  # remoteの素のmasterへ強制切り替え
  com = "! f () { m=$(git rev-parse --symbolic --verify --quiet main || git rev-parse --symbolic --verify --quiet master); git checkout -B ${m} origin/${m}; }; f"
  # 最新を取り込んだmasterへ切り替え
  cor = "! f () { remote_head=$(git symbolic-ref --quiet refs/remotes/origin/HEAD); remote_head=${remote_head#refs/remotes/origin/}; git checkout ${remote_head:-$(git rev-parse --symbolic --verify --quiet main || git rev-parse --symbolic --verify --quiet master)}; }; f"
  sh = show
  s = status
  st = status --short --branch #  --short:show status concisely --branch:show branch information
  sa = stash
  sm = submodule
  smcl = submodule update --init --recursive
  cl = clone --recursive  # cloneの時､同時にsubmoduleもクローンしてくる
  ft = fetch
  ftp = fetch --prune # リモートで削除されているリモートブランチを削除する
  pl = pull
  ps = push
  re = remote
  rb = rebase
  cp = cherry-pick
  # リモートで削除されたブランチをローカルで削除 または git ftpでも同じ
  remote-deleted-baranch-deletion = remote prune origin
  # リモートURLの上書き
  remote-url-set = remote set-url origin

  d = diff
  dc = diff --cached          # addされているものとのdiff
  ds = diff --staged          # 同上(ver1.6.1以降)
  dh = diff HEAD               # HEADとdiff
  d1 = diff HEAD~             # HEADから1つ前とdiff
  d2 = diff HEAD~~            # HEADから2つ前とdiff
  d3 = diff HEAD~~~           # HEADから3つ前とdiff
  d4 = diff HEAD~~~~          # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~         # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~   # HEADから10前とdiff

  l = log
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lga = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  al = !"if test -z $1; then loop=; for k in `git config --get-regexp ^alias\\. | sort | sed -e 's/^alias\\.\\(\\S*\\).*/\\1/g'`; do echo -n $k; loop="${loop}1"; if test ${#loop} -lt 5; then echo -n '\t'; else echo; loop=; fi; done; exit; fi; git config --list | grep ^alias\\.$1= | sed -e s/^alias\\.//; exit;"
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort


  # マージ済みブランチ削除 (削除前に確認する)
  delete-merged-branch = "!f () { git branch --merged|egrep -v '\\*|develop|master' | xargs -p --no-run-if-empty git branch -d; };f"
  # マージ済みブランチの削除(確認せず実行)とリモート先で削除された追跡ブランチの削除を行う
  all-branch-clean = "!f () { git branch --merged|egrep -v '\\*|develop|master' | xargs --no-run-if-empty git branch -d; };f && git remote prune origin"
